import java.util.Collection;
class Solution {
    void sort(int nums[], int l, int m, int r){
        
        //1.Find size of sub arrays
        int n1 = m-l+1;
        int n2 = r-m;

        //2. Create sub arrays and populate them
        int a1[] = new int[n1];
        int a2[] = new int[n2];
        for(int i = 0 ; i <n1; i++){
            a1[i] = nums[i+l];
        }
        for(int i = 0 ; i <n2; i++){
            a2[i] = nums[i+m+1];
        }
        
        //3. Merge two sub arrays and populate in nums
        int i = 0 , j = 0, k = l ;
        while(i < n1 && j < n2){
            if( a1[i] < a2[j]){
                nums[k] = a1[i];
                i++;
            } else {
                nums[k] = a2[j];
                j++;
            }
            k++;
        }
        while(j < n2){
            nums[k] = a2[j];
            j++; k++;
        }
        while(i < n1){
            nums[k] = a1[i];
            i++; k++;
        }
    }
    void mergeSort(int nums[], int l, int r){
        int m = l+((r-l)/2);
        if(r > l){
            mergeSort(nums, l, m);
            mergeSort(nums, m+1, r);
            sort(nums, l , m , r);
        }
    }
    
    boolean bSearch(int nums[], int sum, int idx1, int idx2, int l, int r){
        if(r >= l){
            int m = l+ ((r-l)/2);
            if(sum == nums[m] ){
                //check if the number is not being used already
                if(idx1 == m || idx2 == m){ 
                    if(bSearch(nums, sum, idx1, idx2, l, m-1) || bSearch(nums, sum, idx1, idx2, m+1 , r))
                        return true;
                    return false;
                }
                else {
                    return true;
                }
            } else if(sum < nums[m]){
                   return bSearch(nums, sum, idx1, idx2, l, m-1);
            } else{
                    return bSearch(nums, sum, idx1, idx2, m+1 , r);
            }
        } return false; 
    }
    
    boolean isDuplicate(List<List<Integer>> list, int i, int j , int sum) {
       for(int k = 0 ; k < list.size(); k++){
            Collection c = new ArrayList(Arrays.asList(list.get(k).get(0), list.get(k).get(1), list.get(k).get(2)));
           if(c.contains(i)){
                c.remove(i);
                if(c.contains(j)){
                    c.remove(j);
                    if(c.contains(sum)){
                        return true;
                    }
                }
            }
        }
        return false; 
        
    }   
    
    void print(int nums[]){
        for (int i = 0 ; i < nums.length; i++){
            System.out.println(nums[i]);
        }
    }
    
    public List<List<Integer>> threeSum(int[] nums) {
        if(nums.length < 3) return new ArrayList<>() ;
        List<List<Integer>> list = new ArrayList<>();
        //0. Check if the array has same element
        int flag = 0;
        for(int i = 1 ; i < nums.length; i++){
            if(nums[0] != nums[i]){
                flag = 1; 
                break;
            }
        }
        if(flag == 0){
            if(nums[0] == 0){
                list.add(Arrays.asList(0, 0 , 0));
            }
            return list;
        }
        
        //1. Sort the nums array: O(nlogn)
        mergeSort(nums, 0 , nums.length -1);
        print(nums);
        
        //2.take sum of two integers at a time and binary search for the third one: O(n^2 logn) 
        for (int i = 0 ; i < nums.length ; i++){
            for (int j = i+1; j< nums.length; j++){
                int sum = nums[i] + nums[j];
                if(sum != 0){
                    sum = sum * -1;
                }
                //binary search for -sum in the rest of the array (O)
                if(bSearch (nums, sum, i, j, i, nums.length -1)){
                    System.out.println("found " + sum + " "+ nums[i] + " "+ nums[j]);
                
                    //3. if found, check if it is not a repeating entry
                    if(!isDuplicate(list, nums[i] , nums[j] , sum)){
                        list.add(Arrays.asList(nums[i] , nums[j] , sum));
                    }
                } 
            }
        }
        return list; 
    }
}
