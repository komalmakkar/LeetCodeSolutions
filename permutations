class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new  ArrayList<>();
        if(nums == null || nums.length == 0) {
            list.add(new ArrayList<Integer>());
            return list;
        }
        backtrack(list, nums, 0, nums.length-1);
        return list;
    }
    
    void backtrack(List<List<Integer>> list, int [] nums, int l, int r){
        if(l == r){
            ArrayList<Integer> lt = new ArrayList<Integer>();
            for(int i = 0 ; i <= r; i++){
                lt.add(nums[i]);
            }
            list.add(lt);
        }
        else if(l<r){
            for(int i = l ; i <= r ; i++){
                swap(nums,l,i);
                backtrack(list, nums, l+1 , r);
                swap(nums,l,i);
            }
        }
    }
    void swap(int [] nums, int l, int r){
        int temp = nums[l];
        nums[l] = nums[r];
        nums[r] = temp; 
    }
}
